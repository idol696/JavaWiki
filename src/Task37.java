/*

–®–∞–≥ 1: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ Apache POI
–î–ª—è —Ä–∞–±–æ—Ç—ã —Å Excel (.xlsx, .xls) –∏—Å–ø–æ–ª—å–∑—É–µ–º Apache POI.
–ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ Maven, –¥–æ–±–∞–≤—å—Ç–µ –≤ pom.xml:

xml
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
<dependencies>
    <!-- Apache POI –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Excel -->
    <dependency>
        <groupId>org.apache.poi</groupId>
        <artifactId>poi-ooxml</artifactId>
        <version>5.2.3</version>
    </dependency>
</dependencies>
–ï—Å–ª–∏ —Å–∫–∞—á–∏–≤–∞–µ—Ç–µ jar-—Ñ–∞–π–ª—ã –≤—Ä—É—á–Ω—É—é, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏—Ö —Å Apache POI.

–®–∞–≥ 2: –°–æ–∑–¥–∞–¥–∏–º –∫–ª–∞—Å—Å—ã Car –∏ Upgrade
java
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
import java.util.List;

public class Car {
    private int id;
    private List<Upgrade> upgrades;

    public Car(int id, List<Upgrade> upgrades) {
        this.id = id;
        this.upgrades = upgrades;
    }

    public int getId() {
        return id;
    }

    public List<Upgrade> getUpgrades() {
        return upgrades;
    }

    @Override
    public String toString() {
        return "Car{id=" + id + ", upgrades=" + upgrades + "}";
    }
}
java
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
public class Upgrade {
    private int id;
    private String name;

    public Upgrade(int id, String name) {
        this.id = id;
        this.name = name;
    }

    public int getId() {
        return id;
    }

    @Override
    public String toString() {
        return name; // –í—ã–≤–æ–¥–∏–º –∏–º—è –∞–ø–≥—Ä–µ–π–¥–∞
    }
}
–®–∞–≥ 3: –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel
java
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.*;

public class Task37 {
    public static void main(String[] args) {
        String carFile = "Car.xlsx";
        String upgradeFile = "Upgrade.xlsx";

        try {
            // –ß–∏—Ç–∞–µ–º –∞–ø–≥—Ä–µ–π–¥—ã
            Map<Integer, Upgrade> upgradesMap = readUpgrades(upgradeFile);

            // –ß–∏—Ç–∞–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –∏ —Å–≤—è–∑—ã–≤–∞–µ–º –∏—Ö —Å –∞–ø–≥—Ä–µ–π–¥–∞–º–∏
            List<Car> cars = readCars(carFile, upgradesMap);

            // –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            cars.forEach(System.out::println);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    // –ß–∏—Ç–∞–µ–º —Ç–∞–±–ª–∏—Ü—É Upgrade.xlsx –∏ —Å–æ–∑–¥–∞–µ–º Map<id, Upgrade>
    private static Map<Integer, Upgrade> readUpgrades(String filePath) throws IOException {
        Map<Integer, Upgrade> upgrades = new HashMap<>();

        try (FileInputStream fis = new FileInputStream(new File(filePath));
             Workbook workbook = new XSSFWorkbook(fis)) {

            Sheet sheet = workbook.getSheetAt(0);
            for (Row row : sheet) {
                if (row.getRowNum() == 0) continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                int id = (int) row.getCell(0).getNumericCellValue();
                String name = row.getCell(1).getStringCellValue();
                upgrades.put(id, new Upgrade(id, name));
            }
        }

        return upgrades;
    }

    // –ß–∏—Ç–∞–µ–º —Ç–∞–±–ª–∏—Ü—É Car.xlsx –∏ —Å–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–∞—à–∏–Ω —Å –Ω—É–∂–Ω—ã–º–∏ –∞–ø–≥—Ä–µ–π–¥–∞–º–∏
    private static List<Car> readCars(String filePath, Map<Integer, Upgrade> upgradesMap) throws IOException {
        List<Car> cars = new ArrayList<>();

        try (FileInputStream fis = new FileInputStream(new File(filePath));
             Workbook workbook = new XSSFWorkbook(fis)) {

            Sheet sheet = workbook.getSheetAt(0);
            for (Row row : sheet) {
                if (row.getRowNum() == 0) continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫

                int carId = (int) row.getCell(0).getNumericCellValue();
                String upgradesStr = row.getCell(1).getStringCellValue();

                List<Upgrade> carUpgrades = new ArrayList<>();
                for (String upgradeIdStr : upgradesStr.split(",")) {
                    int upgradeId = Integer.parseInt(upgradeIdStr.trim());
                    if (upgradesMap.containsKey(upgradeId)) {
                        carUpgrades.add(upgradesMap.get(upgradeId));
                    }
                }

                cars.add(new Car(carId, carUpgrades));
            }
        }

        return cars;
    }
}
–®–∞–≥ 4: –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã Car.xlsx –∏ Upgrade.xlsx
üìå Car.xlsx

ID	Upgrades
1	101,102,103
2	102,104
3	101,104,105
üìå Upgrade.xlsx

ID	Name
101	Spoiler
102	Turbo
103	Neon Lights
104	Nitro
105	Sunroof
–í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–∫–æ–Ω—Å–æ–ª—å)
bash
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
Car{id=1, upgrades=[Spoiler, Turbo, Neon Lights]}
Car{id=2, upgrades=[Turbo, Nitro]}
Car{id=3, upgrades=[Spoiler, Nitro, Sunroof]}
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –∫–æ–¥–∞:
–ß–∏—Ç–∞–µ–º Upgrade.xlsx:

–°–æ–∑–¥–∞–µ–º Map <id, Upgrade>, —á—Ç–æ–±—ã –±—ã—Å—Ç—Ä–æ –Ω–∞—Ö–æ–¥–∏—Ç—å –∞–ø–≥—Ä–µ–π–¥—ã.
–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫, —á–∏—Ç–∞–µ–º id –∏ name, –∑–∞–ø–æ–ª–Ω—è–µ–º Map.
–ß–∏—Ç–∞–µ–º Car.xlsx:

–†–∞–∑–¥–µ–ª—è–µ–º —Å–ø–∏—Å–æ–∫ upgrades (id1,id2,id3).
–î–ª—è –∫–∞–∂–¥–æ–≥–æ id –Ω–∞—Ö–æ–¥–∏–º Upgrade –≤ Map –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ List<Upgrade>.
–°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Car –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ List<Car>.
–í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –º–∞—à–∏–Ω —Å –∏—Ö –∞–ø–≥—Ä–µ–π–¥–∞–º–∏.


 */